class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class Stack:
    def __init__(self):
        self.head = None
        self._size = 0

    def push(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node
        self._size += 1

    def pop(self):
        if self.isEmpty():
            print("Stack is Empty")
            return None
        popped_node = self.head
        self.head = self.head.next
        self._size -= 1
        return popped_node.data

    def peek(self):
        if self.isEmpty():
            print("Stack is Empty")
            return None
        return self.head.data

    def isEmpty(self):
        return self._size == 0

    def size(self):
        return self._size

    def full_stack(self):
      current = self.head
      while current:
        print(current.data, end = "->")
        current = current.next

    def reverse(self):
      prev = None
      current = self.head

      while current:
        next_node = current.next
        current.next = prev
        prev = current
        current = next_node
      self.head = prev



# Example Usage
mystack = Stack()
mystack.push(6)
mystack.push(7)
mystack.push(3)
mystack.push(11)

print("\nPeek:", mystack.peek())
print("\nPop:", mystack.pop())
print("\nIs Empty:", mystack.isEmpty())
print("\nSize:", mystack.size())
print("\nfull stack:")
mystack.full_stack()
print("\n\nreversed stack:")
mystack.reverse()
mystack.full_stack()