class TreeNode:
  def __init__(self, data):
    self.data = data
    self.left = None
    self.right = None
    self.height = 1

def getHeight(node):
  if node is None:
    return 0
  return node.height

def getBalance(node):
  if node is None:
    return 0
  return getHeight(node.left) - getHeight(node.right)

def rotateRight(y):
  x = y.left
  T2 = x.right
  x.right = y
  y.left = T2
  y_height = 1 + max(getHeight(y.left), getHeight(y.right))
  x_height = 1 + max(getHeight(x.left), getHeight(x.right))
  return x

def rotateLeft(x):
  y = x.right
  T2 = y.left
  y.left = x
  x.right = T2
  x_height = 1 + max(getHeight(x.left), getHeight(x.right))
  y_height = 1 + max(getHeight(y.left), getHeight(y.right))
  return y

def insert(node, data):
  if not node:
    return TreeNode(data)
  if data < node.data:
    node.left = insert(node.left, data)
  elif data > node.data:
    node.right = insert(node.right, data)

  node.height = 1 + max(getHeight(node.left), getHeight(node.right))
  balance = getBalance(node)


    # Left Left
  if balance > 1 and getBalance(node.left) >= 0:
        return rotateRight(node)

    # Left Right
  if balance > 1 and getBalance(node.left) < 0:
      node.left = leftRotate(node.left)
      return rotateRight(node)

  # Right Right
  if balance < -1 and getBalance(node.right) <= 0:
      return rotateLeft(node)

  # Right Left
  if balance < -1 and getBalance(node.right) > 0:
      node.right = rightRotate(node.right)
      return rotateLeft(node)

  return node

def inOrderTraversal(node):
    if node is None:
        return
    inOrderTraversal(node.left)
    print(node.data, end=", ")
    inOrderTraversal(node.right)

# Inserting nodes
root = None
letters = ['C', 'B', 'E', 'A', 'D', 'H', 'G', 'F']
for letter in letters:
    root = insert(root, letter)

inOrderTraversal(root)