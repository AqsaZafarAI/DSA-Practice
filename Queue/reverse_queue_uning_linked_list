class Node:
  def __init__(self, data):
    self.data = data
    self.next = None

class Queue:
  def __init__(self):
    self.front = None
    self.rear = None
    self.length = 0



  def enqueue(self, element):
    new_node = Node(element)

    if self.rear is None:
      self.front = self.rear = new_node
      self.length += 1
      return

    self.rear.next = new_node
    self.rear = new_node
    self.length += 1



  def print_queue(self):
    temp = self.front
    while temp:
      print(temp.data, end = " ")
      temp = temp.next
    print()




  #def reverse(self):
    #prev = None
    #current = self.front
    #while current:
      #current.next = prev
      #prev = current
      #current.next = next_node
    #self.head = prev


  def reverse(self):
        prev = None
        current = self.front
        self.rear = self.front  # The current front will become the rear
        while current:
            next_node = current.next  # Store the next node
            current.next = prev  # Reverse the current node's pointer
            prev = current  # Move `prev` to this node
            current = next_node  # Move to the next node
        self.front = prev  # Update the front to the new head



myqueue = Queue()
myqueue.enqueue(7)
myqueue.enqueue(8)
myqueue.enqueue(6)
myqueue.enqueue(9)

print("My Queue:")
myqueue.print_queue()
print("\nReverse Queue:")
myqueue.reverse()
myqueue.print_queue()